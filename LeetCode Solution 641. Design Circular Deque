#######################################################################################################################################

LEETCODE Solution 641. Design Circular Deque
Solved
Medium
Topics
Companies
Design your implementation of the circular double-ended queue (deque).

Implement the MyCircularDeque class:

MyCircularDeque(int k) Initializes the deque with a maximum size of k.
boolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise.
boolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise.
boolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise.
boolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise.
int getFront() Returns the front item from the Deque. Returns -1 if the deque is empty.
int getRear() Returns the last item from Deque. Returns -1 if the deque is empty.
boolean isEmpty() Returns true if the deque is empty, or false otherwise.
boolean isFull() Returns true if the deque is full, or false otherwise.

Example 1:

Input
["MyCircularDeque", "insertLast", "insertLast", "insertFront", "insertFront", "getRear", "isFull", "deleteLast", "insertFront", "getFront"]
[[3], [1], [2], [3], [4], [], [], [], [4], []]
Output
[null, true, true, true, false, 2, true, true, true, 4]

Explanation
MyCircularDeque myCircularDeque = new MyCircularDeque(3);
myCircularDeque.insertLast(1);  // return True
myCircularDeque.insertLast(2);  // return True
myCircularDeque.insertFront(3); // return True
myCircularDeque.insertFront(4); // return False, the queue is full.
myCircularDeque.getRear();      // return 2
myCircularDeque.isFull();       // return True
myCircularDeque.deleteLast();   // return True
myCircularDeque.insertFront(4); // return True
myCircularDeque.getFront();     // return 4

#######################################################################################################################################

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def is_empty(self):
        return self.head is None

    def push_front(self, x: int) -> bool:
        new_node = Node(x)
        if self.is_empty():
            self.head = self.tail = new_node
            new_node.next = self.head  # Circular link
        else:
            new_node.next = self.head
            self.head = new_node
            self.tail.next = self.head  # Maintain circular link
        self.size += 1
        return True

    def push_rear(self, x: int) -> bool:
        new_node = Node(x)
        if self.is_empty():
            self.head = self.tail = new_node
            new_node.next = self.head  # Circular link
        else:
            self.tail.next = new_node
            self.tail = new_node
            self.tail.next = self.head  # Maintain circular link
        self.size += 1
        return True

    def pop_front(self) -> bool:
        if self.is_empty():
            return False
        if self.head == self.tail:  # Only one node
            self.head = self.tail = None
        else:
            self.head = self.head.next
            self.tail.next = self.head  # Maintain circular link
        self.size -= 1
        return True

    def pop_rear(self) -> bool:
        if self.is_empty():
            return False
        if self.head == self.tail:  # Only one node
            self.head = self.tail = None
        else:
            current = self.head
            while current.next != self.tail:
                current = current.next
            current.next = self.head
            self.tail = current
        self.size -= 1
        return True

    def front(self) -> int:
        if self.is_empty():
            return -1
        return self.head.data

    def rear(self) -> int:
        if self.is_empty():
            return -1
        return self.tail.data

    def get_size(self) -> int:
        return self.size

class MyCircularDeque:
    def __init__(self, k: int):
        self.capacity = k
        self.queue = SList()

    def insertFront(self, value: int) -> bool:
        if self.isFull():
            return False
        return self.queue.push_front(value)

    def insertLast(self, value: int) -> bool:
        if self.isFull():
            return False
        return self.queue.push_rear(value)

    def deleteFront(self) -> bool:
        return self.queue.pop_front()

    def deleteLast(self) -> bool:
        return self.queue.pop_rear()

    def getFront(self) -> int:
        return self.queue.front()

    def getRear(self) -> int:
        return self.queue.rear()

    def isEmpty(self) -> bool:
        return self.queue.is_empty()

    def isFull(self) -> bool:
        return self.queue.get_size() == self.capacity

# Your MyCircularDeque object will be instantiated and called as such:
# obj = MyCircularDeque(k)
# param_1 = obj.insertFront(value)
# param_2 = obj.insertLast(value)
# param_3 = obj.deleteFront()
# param_4 = obj.deleteLast()
# param_5 = obj.getFront()
# param_6 = obj.getRear()
# param_7 = obj.isEmpty()
# param_8 = obj.isFull()
