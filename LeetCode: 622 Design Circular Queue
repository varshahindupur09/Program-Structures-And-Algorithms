##########################################################################################################################################
Solution: LeetCode: 622 Design Circular Queue
Solved
Medium
Topics
Companies
Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.

Implement the MyCircularQueue class:

MyCircularQueue(k) Initializes the object with the size of the queue to be k.
int Front() Gets the front item from the queue. If the queue is empty, return -1.
int Rear() Gets the last item from the queue. If the queue is empty, return -1.
boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
boolean isEmpty() Checks whether the circular queue is empty or not.
boolean isFull() Checks whether the circular queue is full or not.
You must solve the problem without using the built-in queue data structure in your programming language. 

##########################################################################################################################################

class Node:
    def __init__(self, data: int):
        self.data = data
        self.next = None

class SList:
    def __init__(self):
        self.head = None
        self.tail = None # extra
        self.size = 0 # extra

    def is_empty(self) -> bool:
        return self.head is None 

    def enqueue(self, x: int) -> None:
        # element is entered from rear end
        new_node = Node(x)
        # if the queue is empty
        if self.is_empty():
            self.head = self.tail = new_node
            new_node.next = self.head
        else: # not empty
            self.tail.next = new_node
            self.tail = new_node
            self.tail.next = self.head
        self.size += 1

    def dequeue(self) -> int:
        if self.is_empty():
            return False  # Returning -1 to signify an empty stack
        remove_node = self.head.data
        # if there is only one node
        if self.head == self.tail:
            self.head = self.tail = None
        else:
            self.head = self.head.next
            self.tail.next = self.head
        self.size -= 1
        return True

    def front(self) -> int:
        if self.is_empty():
            return -1  # Returning -1 to signify an empty stack
        return self.head.data

    def rear(self) -> int:
        if self.is_empty():
            return -1  # Returning -1 to signify an empty stack
        return self.tail.data
    
    def get_size(self) -> int:
        return self.size

class MyCircularQueue:
    def __init__(self, k: int):
        self.queue = SList()
        self.capacity = k
    
    def isFull(self) -> bool:
        return self.queue.get_size() == self.capacity   

    def enQueue(self, value: int) -> bool:
        if self.isFull():
            return False
        self.queue.enqueue(value)
        return True

    def deQueue(self) -> bool:
        return self.queue.dequeue()

    def Front(self) -> int:
        return self.queue.front()

    def Rear(self) -> int:
        return self.queue.rear()

    def isEmpty(self) -> bool:
        return self.queue.is_empty()
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
