###################################################################################################

Solution: Implement Stack Using Queues

Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).

Implement the MyStack class:

void push(int x) Pushes element x to the top of the stack.
int pop() Removes the element on the top of the stack and returns it.
int top() Returns the element on the top of the stack.
boolean empty() Returns true if the stack is empty, false otherwise.
Notes:

You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.
Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.

###################################################################################################

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SList:
    def __init__(self):
        self.head = None

    def push_front(self, x: int) -> None:
        new_node = Node(x)
        new_node.next = self.head
        self.head = new_node

    def pop_front(self) -> int:
        if self.is_empty():
            return -1  # Returning -1 to signify an empty stack
        remove_node = self.head.data
        self.head = self.head.next
        return remove_node

    def front(self) -> int:
        if self.is_empty():
            return -1  # Returning -1 to signify an empty stack
        return self.head.data

    def is_empty(self) -> bool:
        return self.head is None

class MyStack:
    def __init__(self):
        self.list = SList()

    def push(self, x: int) -> None:
        self.list.push_front(x)

    def pop(self) -> int:
        return self.list.pop_front()

    def top(self) -> int:
        return self.list.front()  # Fix: Return the value

    def empty(self) -> bool:
        return self.list.is_empty()

# Example usage:
myStack = MyStack()
myStack.push(1)
myStack.push(2)
print(myStack.top())    # Output: 2
print(myStack.pop())    # Output: 2
print(myStack.empty())  # Output: False

